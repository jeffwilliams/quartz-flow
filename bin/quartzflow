#!/usr/bin/env ruby
require 'getoptlong'
require 'quartz_torrent'

def doSetup
  home = "."

  opts = GetoptLong.new(
    [ '--homedir', '-d', GetoptLong::REQUIRED_ARGUMENT],
  )       

  opts.each do |opt, arg|
    if opt == '--homedir'
      home = arg
    end
  end

  if ! File.directory?(home)
    puts "Error: The directory '#{home}' we will setup into doesn't exist."
    exit 1
  end

  if ! File.owned?(home)
    puts "Error: The directory '#{home}' is not owned by this user. Please change the owner."
    exit 1
  end

  puts "Initializing new quartzflow home in #{home == "." ? "current directory" : home}"
  Home.new(home).setup
end

def doHelp
  if ARGV.size == 0
    puts "Used to manage or start quartzflow."
    puts "Usage: #{$0} [command] [options]"
    puts ""
    puts "If no command is specified, start is assumed."
    puts "For help with a specific command, use 'help command'. The available commands are:"
    puts "  start     Start quartzflow"
    puts "  setup     Setup a new quartzflow home directory"
    puts "  adduser   Add a user"
  else
    command = ARGV.shift
    if command == "setup"
      puts "Initialize a new quartzflow home directory. This command creates the necessary "
      puts "subdirectories and files needed for quartzflow to run. When run without options, "
      puts "the current directory is set up. The directory should be empty and owned by the "
      puts "current user."
      puts ""
      puts "Options:"
      puts "  --homedir DIR, -d DIR       Setup DIR instead of the current directory"
    elsif command == "start"
      puts "Start quartzflow. When run without options, the current directory should be a"
      puts "quartzflow home directory, as created using the setup command."
    elsif command == "adduser"
      puts "Add a user. This command must be run with the --login option."
      puts ""
      puts "Options:"
      puts "  --login LOGIN, -l LOGIN     Login name for the user to be added"
    else
      puts "Unknown command"
    end
  end
end

def doAddUser
  isLinux = RUBY_PLATFORM.downcase.include?("linux")

  opts = GetoptLong.new(
    [ '--login', '-l', GetoptLong::REQUIRED_ARGUMENT],
  )

  login = nil
  opts.each do |opt, arg|
    if opt == '--login'
      login = arg
    end
  end

  if ! login
    puts "The --login option is required for the adduser command"
    exit 1
  end

  system "stty -echo" if isLinux

  print "Password: "
  $stdout.flush
  passwd1 = $stdin.gets.strip
  puts
  print "Password again: "
  $stdout.flush
  passwd2 = $stdin.gets.strip
  puts

  system "stty echo" if isLinux

  if passwd1 != passwd2
    puts "Passwords don't match"
    exit 1
  end

  auth = Authentication.new("etc/passwd")
  auth.add_account(login, passwd1)
end

def doStart
  QuartzTorrent.initThread("main")

  opts = GetoptLong.new(
    [ '--noauth', '-n', GetoptLong::NO_ARGUMENT],
  )

  $useAuthentication = true
  opts.each do |opt, arg|
    if opt == '--noauth'
      $useAuthentication = false
      puts "Warning: running without user authentication. This is not secure"
    end
  end

  require 'quartz_flow/server'

  Thread.new do
    begin
      puts "Starting thread"
      stdout = $stdout
      io = File.open('/dev/pts/0','w')
      until Server.running?
        io.puts "Not running"
        sleep 1
      end

      if Signal.list.has_key?('USR1')
        puts "Registering SIGUSR1 handler"
        Signal.trap('SIGUSR1') { QuartzTorrent.logBacktraces($stdout) }
        Signal.trap('SIGQUIT') { QuartzTorrent.logBacktraces($stdout) }
      end 
    rescue
      puts $!
      puts $!.backtrace.join "\n"
    end
  end

  Server.run!
end

command = :start

if ARGV.size > 0
  command = ARGV.shift.to_sym
end

if command == :setup
  # home is slow to load since it loads the model and calls DataMapper.finalize, so we require it only when needed
  require 'quartz_flow/home'
  doSetup
elsif command == :start
  # home is slow to load since it loads the model and calls DataMapper.finalize, so we require it only when needed
  require 'quartz_flow/home'
  exit 1 if ! Home.new.validate

  doStart
elsif command == :help
  doHelp
elsif command == :adduser
  require 'quartz_flow/authentication'
  doAddUser
else
  puts "Unknown command #{command}"
end
